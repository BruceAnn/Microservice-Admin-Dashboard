{"name":"Microservice-admin-dashboard","tagline":"An admin dashboard for microservices created with dropwizard.","body":"Dropwizard admin dashboard for microservices\r\n=========\r\n\r\nThis repository contains a microservice Dashboard and framework to operate the dashboard. \r\n\r\nDashboard:\r\n----\r\n\r\n  - Metrics and healtcheck viewer for your DropWizard microservices.\r\n  - An overview of all microservices registered with [Apache Zookeeper](http://zookeeper.apache.org/) allong with the [Netflix Curator](https://github.com/Netflix/curator) plugin.\r\n  - A detailed performance metric for each individual service [Netflix Hystrix](https://github.com/Netflix/Hystrix)\r\n  - Server overview that shows the CPU, RAM and Disk usage.\r\n  - Centralized log management without external dependencies! (it reads your file log)\r\n\r\nFramework:\r\n----\r\nThe dashboard is shipped with a framework / library for dropwizard, which enables you to connect to the admin dashboard and use all its functions with the minimum line of code. It has the following features:\r\n\r\n  - Registers and configures your service with [Apache Zookeeper](http://zookeeper.apache.org/) with a single line of code. \r\n  - It has a build in ServiceLocator, you can call other services by name (without knowing their address and / or port).\r\n  - The ServiceLocator uses the [Netflix Feign](https://github.com/Netflix/feign) library to call other services through Java interfaces.\r\n  - It has [Yammer Tenacity](https://github.com/yammer/tenacity) support build in.\r\n  - It has build in authentication support by adding the following piece to your confguration file.    \r\n \r\n```        \r\n    authentication:\r\n        servicename: Login_service\r\n        path: /api/token/  \r\n```  \r\nScreenshots\r\n----\r\n![alt tag](https://raw.githubusercontent.com/abduegal/Microservice_admin_dashboard/master/screenshots/large1.png)\r\n![alt tag](https://raw.githubusercontent.com/abduegal/Microservice_admin_dashboard/master/screenshots/large2.png)\r\n![alt tag](https://raw.githubusercontent.com/abduegal/Microservice_admin_dashboard/master/screenshots/large3.png)\r\n![alt tag](https://raw.githubusercontent.com/abduegal/Microservice_admin_dashboard/master/screenshots/large4.png)\r\n![alt tag](https://raw.githubusercontent.com/abduegal/Microservice_admin_dashboard/master/screenshots/large5.png)\r\n![alt tag](https://raw.githubusercontent.com/abduegal/Microservice_admin_dashboard/master/screenshots/large6.png)\r\n\r\n\r\nInstallation:\r\n----\r\n- Install  [Apache Zookeeper](http://zookeeper.apache.org/) and run it.\r\n- Download the dashboard [here](https://github.com/abduegal/Microservice_admin_dashboard/raw/master/dashboard-release-0.8.zip) and extract the zip file.\r\n- Run the dashboard through the following command:  \r\n``` java -jar dashboard-0.8.jar server config.yml``` \r\n- The dashboard should be up and running on [http://localhost:8080](http://localhost:8080)\r\n\r\nGetting started\r\n----\r\n\r\n> There is an example project included, which you can use as a reference.  \r\n\r\nAfter you have got the dashboard up and running, create a new Dropwizard project.\r\n\r\n- Add the following dependency\r\n```xml\r\n    <dependency>\r\n        <groupId>com.github.abduegal</groupId>\r\n        <artifactId>microservice-framework-core</artifactId>\r\n        <version>0.8</version>\r\n    </dependency>\r\n```\r\n- Make your dropwizard Configuration class extend from MicroserviceConfig instead of the io.dropwizard.Configuration class.\r\n- Add the following line to your Dropwizard Application class: \r\n\r\n```java    \r\n    @Override\r\n    public void initialize(Bootstrap<ExampleConfiguration> bootstrap) {\r\n        bootstrap.addBundle(new MicroserviceBundle<>());\r\n    }\r\n```    \r\n      \r\n- Add the following to your configuration.yml file:\r\n\r\n```yml       \r\n    discovery:\r\n      serviceName: Example\r\n      namespace: myapp\r\n      #zookeeper:\r\n      port: 2181\r\n      listenAddress: 127.0.0.1\r\n       \r\n    server:\r\n      applicationConnectors:\r\n      - type: http\r\n        port: 0                          \r\n      adminConnectors:\r\n      - type: http\r\n        port: 0\r\n      requestLog:\r\n          timeZone: UTC\r\n          appenders:\r\n          - type: file\r\n            currentLogFilename: /tmp/example_service.log\r\n            archive: false\r\n            threshold: ALL\r\n      \r\n    logging:\r\n      appenders:\r\n        - type: console\r\n        - type: file\r\n          currentLogFilename: /tmp/example_service.log\r\n          archive: false\r\n          threshold: ALL\r\n```          \r\n- The above snippet does the following things:\r\n  - Defines the zookeeper connection properties.\r\n  - Defines the name of the service (Example) and the namespace (important for the dashboard)\r\n  - Tells the application to use a random port (0)\r\n  - Configures logging (the log file will be used for centralized logging).\r\n\r\nOptionally:\r\n- Use the Hystrix Latency and fault tolerance library by adding the following things to your Dropwizard Application class:\r\n\r\n```java      \r\n    public enum DependencyKeys implements TenacityPropertyKey {\r\n        Action;\r\n\r\n        public static TenacityPropertyKeyFactory getTenacityPropertyKeyFactory() {\r\n            return new TenacityPropertyKeyFactory(){\r\n                @Override\r\n                public TenacityPropertyKey from(String value) {\r\n                    return DependencyKeys.valueOf(value.toUpperCase());\r\n                }\r\n            };\r\n        }\r\n    }\r\n     \r\n    @Override\r\n    public void initialize(Bootstrap<ExampleConfiguration> bootstrap) {\r\n        bootstrap.addBundle(new MicroserviceBundle<>());\r\n        bootstrap.addBundle(TenacityBundleBuilder.newBuilder()\r\n                .propertyKeyFactory(DependencyKeys.getTenacityPropertyKeyFactory())\r\n                .propertyKeys(DependencyKeys.values())\r\n                .build());\r\n    }\r\n     \r\n    @Override\r\n    public void run(ExampleConfiguration exampleConfiguration, Environment environment) throws Exception {\r\n        environment.jersey().register(ExampleResource.class);\r\n\r\n        InitializeTenacity.initialize(DependencyKeys.values());\r\n    }\r\n```\r\n\r\nVersion\r\n----\r\n\r\n0.8\r\n\r\nTech\r\n-----------\r\n\r\nThis project uses a number of open source projects to work properly:\r\n\r\n* [Apache Zookeeper] - for service discovery\r\n* [Netflix Curator] - Zookeeper client wrapper.\r\n* [Netflix Hystrix] - Latency and fault tolerance library\r\n* [Netflix Feign] - java to http client binder\r\n* [Yammer Tenacity] - Dropwizard integration with Netflix Hystrix\r\n* [Dropwizard] - Java Framework\r\n* [AngularJS] - for the front-end\r\n* and more...         \r\n\r\n\r\nLicense\r\n----\r\n\r\nMIT","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}